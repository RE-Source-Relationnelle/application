from flask import jsonify
from config.database import get_db
from . import resources_bp
from bson import ObjectId
from datetime import datetime

@resources_bp.route('/categories', methods=['GET'])
def get_categories():
    """
    Route pour r√©cup√©rer toutes les cat√©gories disponibles
    """
    print("üîÑ D√©but de la route get_categories")

    db = get_db()
    if db is None:
        print("‚ùå Erreur: Base de donn√©es non connect√©e")
        return jsonify({"error": "Erreur de connexion √† la base de donn√©es"}), 500

    try:
        # R√©cup√©rer toutes les cat√©gories
        categories = list(db.category.find())

        def sanitize(document):
            """
            Fonction pour convertir tous les ObjectId et datetime en string
            """
            for key, value in document.items():
                if isinstance(value, ObjectId):
                    document[key] = str(value)
                elif isinstance(value, datetime):
                    document[key] = value.isoformat()
            return document

        # Nettoyage des documents
        sanitized_categories = [sanitize(category) for category in categories]

        # Si aucune cat√©gorie n'est trouv√©e, retourner un tableau vide
        if not sanitized_categories:
            print("‚ÑπÔ∏è Aucune cat√©gorie trouv√©e")
            return jsonify([]), 200

        print(f"‚úÖ {len(sanitized_categories)} cat√©gories trouv√©es")
        return jsonify(sanitized_categories), 200

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des cat√©gories: {str(e)}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration des cat√©gories: {str(e)}"}), 500 