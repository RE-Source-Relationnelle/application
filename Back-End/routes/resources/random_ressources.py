import random
from flask import jsonify, request
from bson import ObjectId
from config.database import get_db
from . import resources_bp
from datetime import datetime
from utils.auth import get_user_id_from_token
from flask_cors import cross_origin


@resources_bp.route('/randomressource', methods=['GET'])
@cross_origin(supports_credentials=True, origins=["http://localhost:3000"])
def get_random_resource():
    """
    Route pour r√©cup√©rer une ressource al√©atoire non consult√©e
    """
    print("üé≤ D√©but de la route get_random_resource")

    token_cookie = request.cookies.get('access_token')
    user_id = get_user_id_from_token(token_cookie) if token_cookie else None

    db = get_db()
    if db is None:
        print("‚ùå Erreur: Base de donn√©es non connect√©e")
        return jsonify({"error": "Erreur de connexion √† la base de donn√©es"}), 500

    try:
        ressources_consultees = []
        if user_id:
            historique = list(db.historique.find({"user_id": ObjectId(user_id)}))
            ressources_consultees = [str(h["resource_id"]) for h in historique]
            print(f"üìö Ressources d√©j√† consult√©es: {ressources_consultees}")
        else:
            print("‚ö†Ô∏è Pas d'utilisateur connect√©, envoi d'une ressource totalement al√©atoire")

        # V√©rifier s'il y a des ressources valid√©es
        pipeline = []
        
        # Ne montrer que les ressources valid√©es (date_validation non nulle)
        pipeline.append({"$match": {"date_validation": {"$ne": None}}})
        
        # Exclure les ressources d√©j√† consult√©es si l'utilisateur est connect√©
        if ressources_consultees:
            pipeline.append({"$match": {"_id": {"$nin": [ObjectId(id) for id in ressources_consultees]}}})
        
        # S√©lectionner une ressource al√©atoire
        pipeline.append({"$sample": {"size": 1}})

        resource = list(db.ressource.aggregate(pipeline))
        if not resource:
            print("‚ÑπÔ∏è Plus de nouvelles ressources disponibles")
            return jsonify({"message": "plus de ressources"}), 200

        resource = resource[0]

        # Ajouter √† l'historique si l'utilisateur est connect√©
        if user_id:
            historique_entry = {
                "user_id": ObjectId(user_id),
                "resource_id": resource["_id"],
                "date_consultation": datetime.utcnow()
            }
            db.historique.insert_one(historique_entry)
            print(f"üìù Ressource {resource['_id']} ajout√©e √† l'historique de l'utilisateur {user_id}")

        def sanitize(document):
            """
            Fonction pour convertir tous les ObjectId et datetime en string
            """
            result = document.copy()  # Cr√©er une copie pour √©viter de modifier l'original
            for key, value in result.items():
                if isinstance(value, ObjectId):
                    result[key] = str(value)
                elif isinstance(value, datetime):
                    result[key] = value.isoformat()
            return result

        sanitized_resource = sanitize(resource)
        print(f"‚úÖ Ressource al√©atoire trouv√©e: {sanitized_resource.get('titre', '[sans titre]')}")
        return jsonify(sanitized_resource), 200

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la ressource al√©atoire: {str(e)}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration de la ressource al√©atoire: {str(e)}"}), 500
