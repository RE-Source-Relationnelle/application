from flask import request, jsonify
from datetime import datetime
from bson import ObjectId
from config.database import get_db
from . import resources_bp
from utils.auth import get_user_id_from_token

@resources_bp.route('/pending', methods=['GET'])
def list_pending_resources():
    """
    Route pour lister toutes les ressources en attente d'approbation
    Seuls les mod√©rateurs peuvent acc√©der √† cette route
    """
    print("üîÑ D√©but de la route list_pending_resources")

    # V√©rification du token
    token_cookie = request.cookies.get('access_token')
    if not token_cookie:
        print("‚ùå Token manquant ou mal form√©")
        return jsonify({"error": "Token manquant ou invalide"}), 401

    user_id = get_user_id_from_token(token_cookie)
    if not user_id:
        return jsonify({"error": "Token invalide"}), 401

    db = get_db()
    if db is None:
        print("‚ùå Erreur: Base de donn√©es non connect√©e")
        return jsonify({"error": "Erreur de connexion √† la base de donn√©es"}), 500
    print(user_id)

    try:
        # V√©rifier si l'utilisateur est mod√©rateur
        user = db.users.find_one({"_id": ObjectId(user_id)})
        if not user:
            print("‚ùå Utilisateur non trouv√©")
            return jsonify({"error": "Utilisateur non trouv√©"}), 404

        # R√©cup√©rer le r√¥le de l'utilisateur
        role = db.role.find_one({"_id": user.get("role_id")})
        if not role or role.get("nom_role") != "mod√©rateur":
            print("‚ùå Acc√®s refus√© : l'utilisateur n'est pas mod√©rateur")
            return jsonify({"error": "Acc√®s non autoris√©"}), 403

        # R√©cup√©rer toutes les ressources en attente
        pending_resources = list(db.ressources_en_attente.find())

        def sanitize(document):
            """
            Fonction pour convertir tous les ObjectId et datetime en string
            """
            for key, value in document.items():
                if isinstance(value, ObjectId):
                    document[key] = str(value)
                elif isinstance(value, datetime):
                    document[key] = value.isoformat()
            return document

        # Nettoyage des documents
        sanitized_resources = [sanitize(resource) for resource in pending_resources]

        print(f"‚úÖ {len(sanitized_resources)} ressources en attente trouv√©es")
        return jsonify(sanitized_resources), 200

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des ressources en attente: {str(e)}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration des ressources en attente: {str(e)}"}), 500 