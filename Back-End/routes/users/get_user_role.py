from flask import request, jsonify
from bson import ObjectId
from config.database import get_db
from . import users_bp
from utils.auth import get_user_id_from_token

@users_bp.route('/role', methods=['GET'])
def get_user_role():
    """
    Route pour r√©cup√©rer le r√¥le de l'utilisateur connect√©
    Accessible √† tous les utilisateurs authentifi√©s
    """
    print("üîÑ D√©but de la route get_user_role")

    # V√©rification du token
    token_cookie = request.cookies.get('access_token')
    if not token_cookie:
        print("‚ùå Token manquant ou mal form√©")
        return jsonify({"error": "Token manquant ou invalide"}), 401

    user_id = get_user_id_from_token(token_cookie)
    if not user_id:
        return jsonify({"error": "Token invalide"}), 401

    db = get_db()
    if db is None:
        print("‚ùå Erreur: Base de donn√©es non connect√©e")
        return jsonify({"error": "Erreur de connexion √† la base de donn√©es"}), 500

    try:
        # V√©rifier si l'utilisateur existe
        user = db.users.find_one({"_id": ObjectId(user_id)})
        if not user:
            print("‚ùå Utilisateur non trouv√©")
            return jsonify({"error": "Utilisateur non trouv√©"}), 404

        # R√©cup√©rer le r√¥le de l'utilisateur
        role_info = None
        if 'role_id' in user:
            role = db.role.find_one({"_id": user.get("role_id")})
            if role:
                role_info = {
                    'role_id': str(role['_id']),
                    'nom_role': role.get('nom_role', 'utilisateur')
                }
        
        # Si aucun r√¥le n'est trouv√©, on utilise un r√¥le par d√©faut
        if not role_info:
            role_info = {
                'role_id': None,
                'nom_role': 'utilisateur'
            }
        
        print(f"‚úÖ R√¥le r√©cup√©r√© avec succ√®s: {role_info}")
        return jsonify(role_info), 200

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration du r√¥le: {str(e)}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration du r√¥le: {str(e)}"}), 500
