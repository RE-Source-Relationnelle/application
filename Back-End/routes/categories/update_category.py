from flask import request, jsonify
from bson import ObjectId
from datetime import datetime
from . import categories_bp
from .utils import check_category_permissions

@categories_bp.route('/update_category/<category_id>', methods=['PUT'])
def update_category(category_id):
    """
    Route pour mettre √† jour une cat√©gorie existante
    Accessible uniquement aux administrateurs et super-administrateurs
    """
    print(f"üîÑ D√©but de la route update_category pour l'ID: {category_id}")

    # V√©rification des permissions
    user_id, db, error_response, status_code = check_category_permissions(request.cookies.get('token'))
    if error_response:
        return error_response, status_code

    try:
        # V√©rifier si la cat√©gorie existe
        category = db.categories.find_one({"_id": ObjectId(category_id)})
        if not category:
            print(f"‚ùå Cat√©gorie non trouv√©e pour l'ID: {category_id}")
            return jsonify({"error": "Cat√©gorie non trouv√©e"}), 404

        # R√©cup√©rer les donn√©es de mise √† jour
        data = request.get_json()
        if not data:
            print("‚ùå Aucune donn√©e de mise √† jour fournie")
            return jsonify({"error": "Aucune donn√©e de mise √† jour fournie"}), 400

        # V√©rifier si le nouveau nom de cat√©gorie n'existe pas d√©j√†
        if 'nom_categorie' in data and data['nom_categorie'] != category['nom_categorie']:
            existing_category = db.categories.find_one({"nom_categorie": data['nom_categorie']})
            if existing_category:
                print(f"‚ùå La cat√©gorie '{data['nom_categorie']}' existe d√©j√†")
                return jsonify({"error": "Ce nom de cat√©gorie est d√©j√† utilis√©"}), 400

        # V√©rifier si la cat√©gorie parente existe si elle est sp√©cifi√©e
        if 'parent_id' in data and data['parent_id']:
            parent_category = db.categories.find_one({"_id": ObjectId(data['parent_id'])})
            if not parent_category:
                print(f"‚ùå Cat√©gorie parente non trouv√©e pour l'ID: {data['parent_id']}")
                return jsonify({"error": "Cat√©gorie parente non trouv√©e"}), 404

            # V√©rifier qu'on ne cr√©e pas de cycle (une cat√©gorie ne peut pas √™tre son propre parent)
            if str(parent_category['_id']) == category_id:
                print("‚ùå Une cat√©gorie ne peut pas √™tre sa propre parente")
                return jsonify({"error": "Une cat√©gorie ne peut pas √™tre sa propre parente"}), 400

        # Pr√©parer les champs √† mettre √† jour
        update_fields = {}
        allowed_fields = ['nom_categorie', 'description', 'parent_id', 'is_active']
        for field in allowed_fields:
            if field in data:
                if field == 'parent_id' and data[field]:
                    update_fields[field] = ObjectId(data[field])
                else:
                    update_fields[field] = data[field]

        if not update_fields:
            print("‚ùå Aucun champ valide √† mettre √† jour")
            return jsonify({"error": "Aucun champ valide √† mettre √† jour"}), 400

        # Ajouter les m√©tadonn√©es de mise √† jour
        update_fields['updated_at'] = datetime.utcnow()
        update_fields['updated_by'] = ObjectId(user_id)

        # Mettre √† jour la cat√©gorie
        result = db.categories.update_one(
            {"_id": ObjectId(category_id)},
            {"$set": update_fields}
        )

        if result.modified_count == 0:
            print("‚ùå Aucune modification effectu√©e")
            return jsonify({"error": "Aucune modification effectu√©e"}), 400

        # R√©cup√©rer la cat√©gorie mise √† jour
        updated_category = db.categories.find_one({"_id": ObjectId(category_id)})
        
        # Sanitize la r√©ponse
        def sanitize(doc):
            for key, value in doc.items():
                if isinstance(value, ObjectId):
                    doc[key] = str(value)
                elif isinstance(value, datetime):
                    doc[key] = value.isoformat()
            return doc

        sanitized_category = sanitize(updated_category)
        print(f"‚úÖ Cat√©gorie mise √† jour avec succ√®s: {sanitized_category['nom_categorie']}")
        return jsonify(sanitized_category), 200

    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour de la cat√©gorie: {str(e)}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return jsonify({"error": f"Erreur lors de la mise √† jour de la cat√©gorie: {str(e)}"}), 500 