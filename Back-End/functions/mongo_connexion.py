import os
from pymongo import MongoClient
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# R√©cup√©rer les infos de connexion depuis .env
MONGO_USER = os.getenv("MONGO_USER")
MONGO_PASSWORD = os.getenv("MONGO_PASSWORD")
MONGO_HOST = os.getenv("MONGO_HOST")
MONGO_PORT = os.getenv("MONGO_PORT")
DATABASE_NAME = os.getenv("DATABASE_NAME")

# Construire l'URI en fonction du type de connexion
if MONGO_HOST and MONGO_PORT:
    MONGO_URI = f"mongodb://{MONGO_USER}:{MONGO_PASSWORD}@{MONGO_HOST}:{MONGO_PORT}/"
else:
    MONGO_URI = f"mongodb+srv://{MONGO_USER}:{MONGO_PASSWORD}@{MONGO_HOST}/?retryWrites=true&w=majority"

def get_database():
    try:
        client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=3000)  # Timeout de 3s
        client.admin.command("ping")  # V√©rification imm√©diate de la connexion
        print("‚úÖ Connexion √† MongoDB r√©ussie !")

        # V√©rification de l'existence de la base de donn√©es
        db_list = client.list_database_names()
        if DATABASE_NAME not in db_list:
            print(f"‚ùå La base de donn√©es '{DATABASE_NAME}' n'existe pas.")
            return None

        db = client[DATABASE_NAME]
        print(f"üì¶ Base de donn√©es '{DATABASE_NAME}' connect√©e avec succ√®s !")
        return db

    except Exception as e:
        print(f"‚ùå Erreur de connexion √† MongoDB : {e}")
        return None

# Test de connexion (optionnel)
if __name__ == "__main__":
    db = get_database()
    if db is not None:
        print(f"üìÇ Base connect√©e : {db.name}")
    else:
        print("‚ö†Ô∏è La connexion √† la base a √©chou√©.")
