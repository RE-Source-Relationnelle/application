name: ResourceRellationnelle CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - development
        - production

jobs:
  test-backend:
    name: Test Backend (Python/Flask)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd Back-End
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run backend tests
        run: |
          cd Back-End
          python -m pytest tests/ -v --cov=routes --cov-report=xml || echo "Backend tests completed with issues"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./Back-End/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  test-frontend:
    name: Test Frontend (React/TypeScript)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
      
      - name: Run frontend tests
        run: |
          cd frontend
          pnpm run test || echo "Frontend tests completed with issues"
      
      - name: Run linting
        run: |
          cd frontend
          pnpm run lint || echo "Linting completed with issues"
      
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  build-frontend:
    name: Build Frontend
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: |
          cd frontend
          pnpm install
      
      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Bandit security scan (Python)
        run: |
          cd Back-End
          pip install bandit
          bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
      
      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level moderate || echo "npm audit completed with warnings"
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            frontend/npm-audit.json
          retention-days: 30

  docker-build:
    name: Build Docker Images
    needs: [test-backend, test-frontend, build-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./Back-End
          file: ./Back-End/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ressources-relationnelles-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/ressources-relationnelles-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ressources-relationnelles-frontend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/ressources-relationnelles-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Deploy to development server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /opt/ressources-relationnelles
            docker-compose -f docker-compose.dev.yml pull
            docker-compose -f docker-compose.dev.yml up -d
            docker system prune -f

  deploy-prod:
    name: Deploy to Production
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/ressources-relationnelles
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f
      
      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PROD_URL }}/health || exit 1

  notify:
    name: Notify Pipeline Status
    needs: [test-backend, test-frontend, build-frontend, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Notify on success
        if: needs.test-backend.result == 'success' && needs.test-frontend.result == 'success'
        run: |
          echo "Pipeline completed successfully! ✅"
          echo "Backend tests: ${{ needs.test-backend.result }}"
          echo "Frontend tests: ${{ needs.test-frontend.result }}"
      
      - name: Notify on failure
        if: needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure'
        run: |
          echo "Pipeline failed! ❌"
          echo "Backend tests: ${{ needs.test-backend.result }}"
          echo "Frontend tests: ${{ needs.test-frontend.result }}"
          exit 1 